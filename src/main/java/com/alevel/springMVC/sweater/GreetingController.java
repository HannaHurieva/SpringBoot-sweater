package com.alevel.springMVC.sweater;


import com.alevel.springMVC.sweater.domain.Message;
import com.alevel.springMVC.sweater.repository.MessageRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import java.util.Map;

@Controller // This means that this class is a Controller
public class GreetingController {
    // @Controller - модуль программы, который слушает запросы по пути "/greeting" и возвращает значение "name"

    // This means to get the bean called messageRepo
    // Which is auto-generated by Spring, we will use it to handle the data

    @Autowired
    private MessageRepo messageRepo;

    // Аннотация @RequestMapping гарантирует, что HTTP запросы к /greeting приведут к выполнению метода greeting().
    // @RequestParam связывает значение строкового параметра name запроса с name параметром метода greeting().
    // Этот параметр не required; если он отсутствует в запросе, то будет использовано defaultValue значение "World".

    @GetMapping("/greeting") // Map ONLY GET Requests

    public String greeting(@RequestParam(name = "name", required = false, defaultValue = "World") String name,
                           Map<String, Object> model) {
        // Model model - используем с thymeleaf, при использовании mustache - заменяем на Map<>
        // Значение параметра name добавлено в объект Model, что делает его доступным в шаблоне представления.
        // model.addAttribute - используем с thymeleaf, при использовании mustache - заменяем на put

        model.put("name", name);

        return "greeting";

        // TEST - Подставьте параметр name в строку запроса http://localhost:8080/greeting?name=User.
        // Обратите внимание как изменится сообщение с "Hello, World!" на "Hello, User!":
    }

    @GetMapping
    // @GetMapping is a shortcut for @RequestMapping(method=GET)

    public String main(Map<String, Object> model) {
        Iterable<Message> messages = messageRepo.findAll();
        // This returns a JSON or XML with the messages

        model.put("messages", messages);

        return "main";
    }

    @PostMapping
    // @RequestParam means it is a parameter from the GET or POST request
    public String add(@RequestParam String text,
                      @RequestParam String tag,
                      Map<String, Object> model) {

        Message message = new Message(text, tag);
        messageRepo.save(message);

        Iterable<Message> messages = messageRepo.findAll();
        model.put("messages", messages);

        return "main";
    }

    @PostMapping("filter")
    public String filter(@RequestParam String filter,
                         Map<String, Object> model) {
        Iterable<Message> messages;

        if (filter != null && !filter.isEmpty()) {
            messages = messageRepo.findByTag(filter);
        } else {
            messages = messageRepo.findAll();
        }

        model.put("messages", messages);

        return "main";
    }
}